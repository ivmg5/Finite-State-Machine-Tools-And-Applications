# Write a simple python script that uses the following features:
# 1. Palabras Reservadas: `def`, `if`, `else`, `return`, `class`, `for`, `while`, `break`, `continue` y operadores lógicos (`and`, `or`, `not`)
# 2. Operadores: operadores aritméticos (`+`, `-`, `*`, `/`, `**`, `//`, `%`), operadores de comparación (`==`, `!=`, `<`, `>`, `<=`, `>=`), y operadores	 de asignación (`=`, `+=`, `-=` etc.).
# 3. Literales: literales numéricos (e.g., `123`, `3.14`), literales de cadena (`"Hola"`, `'Mundo'`), literales booleanos (`True`, `False`) y el literal `None`.
# 4. Comentarios: `#`
# 5. Identificadores: un identificador empieza con una letra (A-Z/a-z) o un guión bajo (`_`) seguido de más letras, guiones bajos o dígitos (0-9).
# 6. Estructuras de Datos: listas (`[1, 2, 3]`), tuplas (`(1, 2, 3)`), diccionarios (`{'clave': 'valor'}`) y conjuntos (`{1, 2, 3}`)

# This will help me test my syntax highlighting

def fib(n): # This is a comment
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

fib(1000) # This is another comment

def recursive_fib(n):
    if n <= 1:
        return n
    else:
        return recursive_fib(n-1) + recursive_fib(n-2)

print(recursive_fib(10))

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

def iter_factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

def binary_search(arr, x):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1


def fizzbuzz(n):
    for i in range(1, n+1):
        if i % 3 == 0 and i % 5 == 0:
            print('FizzBuzz')
        elif i % 3 == 0:
            print('Fizz')
        elif i % 5 == 0:
            print('Buzz')
        else:
            print(i)

unsorted_list = [64, 34, 25, 12, 22, 11, 90]

def bogo_sort(arr):
    while not all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):
        random.shuffle(arr)
    return arr

tuple = (1, 2, 3)

dix = {'key': 'value'}

not_a_tuple = (1)

true = True
false = False
none = None
